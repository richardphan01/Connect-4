{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","resetBoard","setState","winner","getPiece","x","y","filter","item","getWinningMovesForVelocity","xPos","yPos","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","dex","length","element","addMove","nextPlayerTurn","availableYPosition","position","concat","this","rowViews","row","columnViews","column","piece","onClick","style","height","width","backgroundColor","display","padding","cursor","boxShadow","className","undefined","props","Object","assign","styles","container","color","renderBoard","React","Component","justifyContent","alignItems","ReactDOM","render","document","getElementById"],"mappings":"yOAAe,I,YCIMA,E,4MAGnBC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,MAAO,GACPC,WAAW,O,EAIbC,WAAa,WACX,EAAKC,SAAS,CAACH,MAAO,GAAII,OAAQ,Q,EAIpCC,SAAW,SAACC,EAAEC,GAKZ,OAJa,EAAKV,MAAMG,MAAMQ,QAAO,SAACC,GACpC,OAAOA,EAAKH,IAAMA,GAAKG,EAAKF,IAAMA,KAGxB,I,EAKdG,2BAA6B,SAACC,EAAMC,EAAMC,EAAWC,GAKnD,IAJA,IAAMC,EAAe,CAAC,CAACT,EAAIK,EAAMJ,EAAGI,IAC9BK,EAAS,EAAKX,SAASM,EAAKC,GAAMI,OAG/BC,EAAQ,EAAGA,GAAS,EAAGA,IAAQ,CACtC,IAAMC,EAASP,EAAKE,EAAUI,EACxBE,EAASP,EAAKE,EAAUG,EAExBG,EAAa,EAAKf,SAASa,EAAOC,GACxC,IAAIC,GAAcA,EAAWJ,SAAWA,EAGtC,MAFAD,EAAaM,KAAK,CAACf,EAAGY,EAAQX,EAAEY,IAOpC,IAAK,IAAIF,GAAS,EAAGA,IAAU,EAAGA,IAAQ,CACxC,IAAMC,EAASP,EAAKE,EAAUI,EACxBE,EAASP,EAAKE,EAAUG,EAExBG,EAAa,EAAKf,SAASa,EAAOC,GACxC,IAAIC,GAAcA,EAAWJ,SAAWA,EAGtC,MAFAD,EAAaM,KAAK,CAACf,EAAGY,EAAQX,EAAEY,IAMpC,OAAOJ,G,EAITO,YAAc,SAAChB,EAAEC,EAAES,GAIjB,IADA,IAAMO,EAAa,CAAC,CAACjB,EAAG,EAAGC,EAAE,GAAI,CAACD,EAAE,EAAEC,EAAE,GAAI,CAACD,GAAG,EAAEC,EAAE,GAAI,CAACD,EAAE,EAAEC,EAAE,IACtDiB,EAAK,EAAGA,EAAID,EAAWE,OAAQD,IAAO,CAC7C,IAAME,EAAUH,EAAWC,GACrBT,EAAe,EAAKL,2BAA2BJ,EAAEC,EAAEmB,EAAQpB,EAAEoB,EAAQnB,GACvEQ,EAAaU,OAAS,GACxB,EAAKtB,SAAS,CAACC,OAAQ,EAAKC,SAASC,EAAEC,GAAGS,OAAOD,mB,EAOvDY,QAAU,SAACrB,EAAEC,GAKX,IAJA,IAAQN,EAAe,EAAKJ,MAApBI,WACF2B,EAA8B,QAAb3B,EAAqB,SAAW,MACnD4B,EAAqB,KAEhBC,EAAW,EAAKjC,MAAMC,KAAO,EAAGgC,GAAY,EAAGA,IACtD,IAAK,EAAKzB,SAASC,EAAEwB,GAAU,CAC7BD,EAAqBC,EACrB,MAIsB,MAAtBD,GACF,EAAK1B,SAAS,CAAEH,MAAO,EAAKH,MAAMG,MAAM+B,OAAO,CAACzB,IAAEC,EAAGsB,EAAmBb,OAAQf,IAAcA,WAAY2B,IAAkB,kBAAK,EAAKN,YAAYhB,EAAEuB,EAAmB5B,O,iDAU3K,WAIE,IAJa,IAAD,OACZ,EAAkC+B,KAAKnC,MAAhBO,GAAvB,EAAQN,KAAR,EAAcC,QAAd,EAAuBK,QACjB6B,EAAW,GAFL,WAIHC,GAEP,IADA,IAAMC,EAAc,GALV,WAMDC,GACP,IAAMC,EAAQ,EAAKhC,SAAS+B,EAAQF,GACpCC,EAAYd,KACV,qBAAKiB,QAAS,WAAO,EAAKX,QAAQS,EAAOF,IAAOK,MAAO,CAAEC,OAAQ,MAAOC,MAAO,MAAOC,gBAAiB,UAAWC,QAAS,OAAQC,QAAS,EAAGC,OAAQ,UAAWC,UAAW,mCAA7K,SACE,qBAAKC,UAAU,OAAf,SACGV,EAAQ,qBAAKU,UAAU,QAAQR,MAAO,CAACG,gBAAiBL,EAAMrB,eAAcgC,QAL5EZ,EAAS,EAAGA,EAAS,EAAKvC,MAAME,QAASqC,IAAU,EAAnDA,GAUTH,EAASZ,KACP,qBAAK0B,UAAU,MAAf,SAAsBZ,MAbjBD,EAAM,EAAGA,EAAMF,KAAKnC,MAAMC,KAAMoC,IAAO,EAAvCA,GAiBT,OACE,sBAAKa,UAAU,aAAf,UACG3C,GAAU,qBAAK2C,UAAU,aAAaT,QAASN,KAAK9B,WAA1C,mBAA0DE,EAA1D,YACV6B,O,oBAMP,WACE,IAAQM,EAAUP,KAAKiB,MAAfV,MACAtC,EAAe+B,KAAKnC,MAApBI,WACR,OACE,qBAAKsC,MAASA,EAAQW,OAAOC,OAAO,GAAIC,EAAOC,UAAWd,GAASa,EAAOC,UAA1E,SACE,sBAAKN,UAAW,cAAhB,6BACkB,sBAAMR,MAAQ,CAACe,MAAOrD,GAAtB,oBACf+B,KAAKuB,cACN,wBAAQR,UAAU,QAAQT,QAASN,KAAK9B,WAAxC,kC,GAxIuBsD,IAAMC,WAgJjCL,EAAS,CACbC,UAAW,CACTb,OAAQ,OACRI,QAAS,EACTD,QAAS,OACTe,eAAgB,SAChBC,WAAY,WCpJhBC,IAASC,OAAO,cAAC,EAAD,IAAOC,SAASC,eAAe,W","file":"static/js/main.3a5004a7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component } from 'react'\n\nexport default class App extends React.Component {\n\n  // Sets state for various basic game aspects such as rows and columns of the grid board, array for playermoves, and which player turn it is\n  state = {\n    rows: 6,\n    columns: 7,\n    moves: [],\n    playerTurn:'red',\n  };\n\n  // Reset board function to restart the game after end\n  resetBoard = () => {\n    this.setState({moves: [], winner: null });\n  }\n\n  // Getting the move associated with row and column or returns undefined if no pieces have been placed\n  getPiece = (x,y) => {\n    const list = this.state.moves.filter((item) => {\n      return(item.x === x && item.y === y);\n\n    });\n    return list[0];\n  }\n\n  // Checks the location of the piece based on x and y position\n  // Added a x,y velocity variable which accounts for changes in diagonal in each of the 4 grid sections (+x,+y), (+x,-y), (-x,+y), (-x,-y)\n  getWinningMovesForVelocity = (xPos, yPos, xVelocity, yVelocity) => {\n    const winningMoves = [{x : xPos, y: xPos}];\n    const player = this.getPiece(xPos,yPos).player;\n\n    // Checks the positive X and Y axis (horizontally to the right and vertically up)\n    for (let delta = 1; delta <= 3; delta++){\n      const checkX = xPos+xVelocity*delta;\n      const checkY = yPos+yVelocity*delta;\n      \n      const checkPiece = this.getPiece(checkX,checkY);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: checkX, y:checkY});\n      } else {\n        break;\n      }\n    }\n\n    // Checks the negative X and Y axis (horizontally to the left and vertically down)\n    for (let delta = -1; delta >= -3; delta--){\n      const checkX = xPos+xVelocity*delta;\n      const checkY = yPos+yVelocity*delta;\n      \n      const checkPiece = this.getPiece(checkX,checkY);\n      if (checkPiece && checkPiece.player === player) {\n        winningMoves.push({x: checkX, y:checkY});\n      } else {\n        break;\n      }\n    }\n\n    return winningMoves;\n  }\n\n  // Checks if the player has won and accounts for both vertically, horizontally, and diagonally\n  checkForWin = (x,y,player) => {\n    \n    // Four directions needed to check\n    const velocities = [{x: 1, y:0}, {x:0,y:1}, {x:-1,y:1}, {x:1,y:1}]\n    for (let dex =0; dex<velocities.length; dex++) {\n      const element = velocities[dex];\n      const winningMoves = this.getWinningMovesForVelocity(x,y,element.x,element.y);\n      if (winningMoves.length > 3) {\n        this.setState({winner: this.getPiece(x,y).player,winningMoves});\n      }\n    }\n  }\n  \n\n  // Adds the second player move to the game allowing for alternating turns and piece colour\n  addMove = (x,y)=> {\n    const { playerTurn } = this.state;\n    const nextPlayerTurn = playerTurn==='red' ? 'yellow' : 'red';\n    let availableYPosition = null;\n    // Adds functionality and game logic by having the piece fall to the bottom-most row of the column that is pressed\n    for (let position = this.state.rows - 1; position >= 0; position--){\n      if (!this.getPiece(x,position)){\n        availableYPosition = position;\n        break;\n      }\n    }\n    // Check for a win based on next move only if there is a piece in the adjacent spot\n    if (availableYPosition != null) {\n      this.setState({ moves: this.state.moves.concat({x,y: availableYPosition,player: playerTurn}), playerTurn: nextPlayerTurn }, ()=> this.checkForWin(x,availableYPosition,playerTurn));\n    }\n\n    \n  }\n  \n\n  // Creating and styling the grid/board of Connect-4 to look similar to the game\n  // Creating rows and columns of board\n  // Line 41: Checks if there is a piece there, changes colour of location to colour of the piece the player is using, otherwise, is undefined and colour remains the same (empty)\n  renderBoard() {\n    const { rows, columns, winner } = this.state;\n    const rowViews = [];\n\n    for (let row = 0; row < this.state.rows; row++){\n      const columnViews = []; \n      for (let column = 0; column < this.state.columns; column++){\n        const piece = this.getPiece(column, row);\n        columnViews.push(\n          <div onClick={() => {this.addMove(column,row)}} style={{ height: '6vw', width: '6vw', backgroundColor: '#00a8ff', display: 'flex', padding: 5, cursor: 'pointer', boxShadow: '0 2px 4px -1px rgba(0,0,0,0.25)'}}>\n            <div className=\"slot\">\n              {piece ? <div className='piece' style={{backgroundColor: piece.player}} /> : undefined}\n            </div>\n          </div>\n        );\n      }\n      rowViews.push(\n        <div className=\"row\">{columnViews}</div>\n      );\n    }\n    // Returns the complete grid/board\n    return (\n      <div className='boardStyle'>\n        {winner && <div className=\"resetBoard\" onClick={this.resetBoard}>{`${winner} WINS!`}</div>}\n        {rowViews}\n      </div>\n    );\n  }\n\n  // Renders the complete board and grid with specified styles to be viewed on the webpage\n  render() {\n    const { style } = this.props;\n    const { playerTurn } = this.state;\n    return (\n      <div style = {style ? Object.assign({}, styles.container, style) : styles.container}>\n        <div className =\"currentTurn\">\n          Current Player: <span style ={{color: playerTurn}}>‚óè</span>\n          {this.renderBoard()}\n          <button className=\"clear\" onClick={this.resetBoard}>Clear Board</button>\n        </div> \n      </div>\n    );\n  }\n}\n\n// Styling the complete grid/board in reference to the webpage\nconst styles = {\n  container: {\n    height: '100%',\n    padding: 5,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    \n  }\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App/>,document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}